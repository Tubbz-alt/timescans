#!/usr/bin/env python

"""
This is a per-run data analysis script for cxij8816, similar to what users
would have to write/modify to do their analysis. We should aim to make this
as simple as possible.

Here is a quick list of things to do, not in any order:
-- geometry interface (currently hidden in a file)
-- radial averagers are a mess (put in skbeam)
-- everything in timescans.algorithms should be somewhere in psana/skbeam

TJL 1/13/16
"""

import argparse
import csv
from mpi4py import MPI

import psana
import numpy as np

from timescans import algorithms


# ---- parse args
parser = argparse.ArgumentParser(description='Analyze a single run')
parser.add_argument('-r', '--run', type=int,
                    help='the run number')
parser.add_argument('-n', '--no-viz', action='store_true',
                    default=False, help='disable visualization')
args = parser.parse_args()


# ---- MPI setup
comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()
print "--> started MPI rank %d/%d" % (rank+1, size)


# ---- some experiment-specific stuff
LASER_ON_EVR  = 183
LASER_OFF_EVR = 184
BYKICK_EVR    = 162 # x-ray off
BAKICK_EVR    = 163 # x-ray off
N_BINS        = 101
UPDATE_FREQ   = 100   # units: shots processed per core



# ---- get calibration data, create detectors
try:
    ds = psana.DataSource('exp=cxij8816:run=%d:dir=/reg/d/ffb/cxi/cxij8816/xtc:smd' % args.run)
except RuntimeError as e:
    ds = psana.DataSource('exp=cxij8816:run=%d' % args.run)

cspad_det = psana.Detector('DscCsPad', ds.env())
evr       = psana.Detector('NoDetector.0:Evr.0', ds.env())
las_stg   = psana.Detector('LAS:FS5:VIT:FS_TGT_TIME_DIAL', ds.env())

tt_pos    = psana.Detector('CXI:TTSPEC:FLTPOS', ds.env())
tt_amp    = psana.Detector('CXI:TTSPEC:AMPL', ds.env())
tt_fwhm   = psana.Detector('CXI:TTSPEC:FLTPOSFWHM', ds.env())
tt_time   = psana.Detector('CXI:TTSPEC:FLTPOS_PS', ds.env())

# DEAL WITH THIS
#geometry_h5 = h5py.File('/reg/d/psdm/cxi/cxij8816/res/geometry/current.h5')
#q_values    = np.array(geometry_h5['/q_values'])
#phi_values  = np.array(geometry_h5['/phi'])
#mask        = np.array(geometry_h5['/mask'])
#geometry_h5.close()

q_values = np.random.randn(32, 185, 388)
mask     = np.ones((32, 185, 388), dtype=np.int32)

ra = algorithms.RadialAverager(q_values, mask, n_bins=N_BINS)


# ---- setup buffers to store data
if rank == 0:
    smd_file = open('/reg/d/psdm/cxi/cxij8816/res/stats/run%04d.csv' % args.run, 'w')
    fieldnames = ['index', 'fdcl', 'timestamp_s', 'timestamp_ns',
                   'xray_on', 'laser_on',
                   'tt_pos', 'tt_amp', 'tt_fwhm', 'las_stg', 'delta_t_ps']
    small_data = csv.DictWriter(smd_file, fieldnames=fieldnames, extrasaction='ignore')
    small_data.writeheader()
    print small_data.fieldnames

    if not args.no_viz:
        from timescans import visualization as viz
        rpt = viz.RunPlots(args.run, ra.bin_centers)


laser_on_sum  = np.zeros(N_BINS)
laser_off_sum = np.zeros(N_BINS)
n_laser_on    = np.array([0])
n_laser_off   = np.array([0])
event_info_list = []


# ---- get the data from the FFB
print 'iterating over shots...'
for nevent, evt in enumerate(ds.events()):


    # different ranks look at different events
    if nevent % size != rank: continue

    if rank == 0: print nevent

    evt_codes = evr(evt)
    cspad_img = cspad_det.calib(evt) # gets the calibrated img

    xray_on   = (BYKICK_EVR not in evt_codes) and (BAKICK_EVR not in evt_codes)
    laser_on  = (LASER_ON_EVR in evt_codes)


    evtId = evt.get(psana.EventId)
    event_info = { 'index'        : nevent,
                   'fdcl'         : evtId.fiducials(),
                   'timestamp_s'  : evtId.time()[0],
                   'timestamp_ns' : evtId.time()[1],
                   'xray_on'      : xray_on,
                   'laser_on'     : laser_on,
                   'tt_pos'       : tt_pos(evt),
                   'tt_amp'       : tt_amp(evt),
                   'tt_fwhm'      : tt_fwhm(evt),
                   'las_stg'      : las_stg(evt),
                   'delta_t_ps'   : tt_time(evt) } # todo this one obv needs work :)

    event_info_list.append(event_info)

    # this part replace in MPI implementation
    if xray_on and (cspad_img is not None):

        cspad_img[cspad_img < 20.0] = 0.0
        rad_avg = ra(cspad_img)

        if laser_on:
            laser_on_sum  += rad_avg
            n_laser_on    += 1
        else:
            laser_off_sum += rad_avg
            n_laser_off   += 1


    # >> every so often, the master pauses to gather all the
    # analyzed data, write it to disk, and send it to lightning

    if len(event_info_list) % UPDATE_FREQ == 0: # dbl check logic

        # first gather ...
        laser_on_sum_agg = comm.gather(laser_on_sum, root=0)
        n_laser_on_agg   = comm.gather(n_laser_on, root=0)

        laser_off_sum_agg = comm.gather(laser_off_sum, root=0)
        n_laser_off_agg   = comm.gather(n_laser_off, root=0)

        info_agg = comm.gather(event_info_list, root=0)
        event_info_list = [] # reset this so it doesn't baloon


        # if we are master
        if rank == 0:

            info_agg = sum(info_agg, []) # flatten

            # write small data to disk
            small_data.writerows(info_agg)
            dts = [ d['delta_t_ps'] for d in info_agg ]

            # compute the values of interest
            laser_on_sum_agg  = np.sum(laser_on_sum_agg, axis=1)
            n_laser_on_agg    = np.sum(n_laser_on_agg)
            laser_off_sum_agg = np.sum(laser_off_sum_agg, axis=1)
            n_laser_off_agg   = np.sum(n_laser_off_agg)
        
            # and send for visualization
            if (not args.no_viz):
                # may want to downsample
                rpt.update_las_on_off(n_laser_on_agg, laser_on_sum_agg,
                                      n_laser_off_agg, laser_off_sum_agg)
                rpt.update_dts(dts)


smd_file.close() 
MPI.Finalize()


